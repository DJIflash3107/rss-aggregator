// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (id, created_at, updated_at, name, api_key) VALUES (UUID(), NOW(), ?, ?, LOWER(
    CONCAT(
      SUBSTRING(CONV(FLOOR(RAND() * 4294967295), 10, 16), 1, 16),
      SUBSTRING(CONV(FLOOR(RAND() * 4294967295), 10, 16), 1, 16),
      SUBSTRING(CONV(FLOOR(RAND() * 4294967295), 10, 16), 1, 16),
      SUBSTRING(CONV(FLOOR(RAND() * 4294967295), 10, 16), 1, 5)
    )
  ))
`

type CreateUserParams struct {
	UpdatedAt sql.NullTime
	Name      string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.UpdatedAt, arg.Name)
}

const getUserByAPIKey = `-- name: GetUserByAPIKey :one
select id, created_at, updated_at, name, api_key from users where api_key = ?
`

func (q *Queries) GetUserByAPIKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAPIKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
	)
	return i, err
}
